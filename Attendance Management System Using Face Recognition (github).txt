import cv2
import numpy as np
import os
import pandas as pd
from datetime import datetime

FACE_DATA_PATH = "face_data"
ATTENDANCE_FILE = "attendance.csv"
MODEL_FILE = "face_recognizer.yml"

os.makedirs(FACE_DATA_PATH, exist_ok=True)


def collect_face_data(name):
    """
    Collect face data for a given user.
    """
    cap = cv2.VideoCapture(0)
    count = 0
    user_path = os.path.join(FACE_DATA_PATH, name)
    os.makedirs(user_path, exist_ok=True)
    print(f"Collecting face data for {name}. Look at the camera and stay steady.")

    while count < 100:  # Capture 100 images
        ret, frame = cap.read()
        if not ret:
            print("Camera not accessible. Exiting.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = cv2.CascadeClassifier(
            cv2.data.haarcascades + "haarcascade_frontalface_default.xml"
        ).detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        for (x, y, w, h) in faces:
            face = gray[y : y + h, x : x + w]
            file_path = os.path.join(user_path, f"{name}_{count}.jpg")
            cv2.imwrite(file_path, face)
            count += 1
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(
                frame,
                f"Collected: {count}/100",
                (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX,
                1,
                (0, 255, 0),
                2,
            )

        cv2.imshow("Collecting Face Data", frame)
        if cv2.waitKey(1) & 0xFF == ord("q") or count >= 100:
            break

    cap.release()
    cv2.destroyAllWindows()
    print(f"Face data collection for {name} completed!")


def train_model():
    """
    Train the LBPH face recognizer on collected face data.
    """
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    faces = []
    labels = []
    label_map = {}
    current_label = 0

    for user in os.listdir(FACE_DATA_PATH):
        user_path = os.path.join(FACE_DATA_PATH, user)
        for file in os.listdir(user_path):
            img_path = os.path.join(user_path, file)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            faces.append(img)
            labels.append(current_label)
        label_map[current_label] = user
        current_label += 1

    recognizer.train(faces, np.array(labels))
    recognizer.write(MODEL_FILE)
    print("Model training completed and saved!")
    return label_map


def mark_attendance(name):
    """
    Mark attendance in a CSV file for the recognized user.
    """
    now = datetime.now()
    date = now.strftime("%Y-%m-%d")
    time = now.strftime("%H:%M:%S")

    if not os.path.exists(ATTENDANCE_FILE):
        df = pd.DataFrame(columns=["Name", "Date", "Time"])
    else:
        df = pd.read_csv(ATTENDANCE_FILE)

    if not ((df["Name"] == name) & (df["Date"] == date)).any():
        df = df.append({"Name": name, "Date": date, "Time": time}, ignore_index=True)
        df.to_csv(ATTENDANCE_FILE, index=False)
        print(f"Attendance marked for {name}.")
    else:
        print(f"Attendance already marked for {name} today.")


def recognize_face(label_map):
    """
    Recognize faces in real-time and mark attendance.
    """
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read(MODEL_FILE)

    cap = cv2.VideoCapture(0)
    print("Starting face recognition. Press 'q' to exit.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Camera not accessible. Exiting.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = cv2.CascadeClassifier(
            cv2.data.haarcascades + "haarcascade_frontalface_default.xml"
        ).detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        for (x, y, w, h) in faces:
            face = gray[y : y + h, x : x + w]
            label, confidence = recognizer.predict(face)
            if confidence < 50:  # Threshold for recognition
                name = label_map[label]
                mark_attendance(name)
                cv2.putText(
                    frame,
                    f"{name} ({int(confidence)}%)",
                    (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.8,
                    (0, 255, 0),
                    2,
                )
            else:
                cv2.putText(
                    frame,
                    "Unknown",
                    (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.8,
                    (0, 0, 255),
                    2,
                )

            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        cv2.imshow("Face Recognition", frame)
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    print("Choose an option:")
    print("1. Collect Face Data")
    print("2. Train Model")
    print("3. Recognize Faces and Mark Attendance")0

    choice = int(input("Enter your choice (1/2/3): "))

    if choice == 1:
        user_name = input("Enter your name: ")
        collect_face_data(user_name)
    elif choice == 2:
        trained_label_map = train_model()
    elif choice == 3:
        if not os.path.exists(MODEL_FILE):
            print("No trained model found. Please train the model first.")
        else:
            label_map = train_model()  # Ensure label mapping exists
            recognize_face(label_map)
    else:
        print("Invalid choice. Exiting.")
